package io.mars.basemanagement.search;

import java.util.Arrays;

import javax.inject.Inject;

import io.vertigo.commons.transaction.VTransactionManager;
import io.vertigo.core.lang.Generated;
import io.vertigo.core.node.Home;
import io.vertigo.core.node.component.Component;
import io.vertigo.core.util.InjectorUtil;
import io.vertigo.datafactory.collections.ListFilter;
import io.vertigo.datafactory.collections.metamodel.FacetedQueryDefinition;
import io.vertigo.datafactory.collections.metamodel.ListFilterBuilder;
import io.vertigo.datafactory.collections.model.FacetedQueryResult;
import io.vertigo.datafactory.collections.model.SelectedFacetValues;
import io.vertigo.datafactory.search.SearchManager;
import io.vertigo.datafactory.search.metamodel.SearchIndexDefinition;
import io.vertigo.datafactory.search.model.SearchQuery;
import io.vertigo.datafactory.search.model.SearchQueryBuilder;
import io.vertigo.dynamo.domain.model.DtListState;
import io.vertigo.dynamo.domain.model.UID;
import io.mars.basemanagement.search.EquipmentIndex;
import io.mars.basemanagement.domain.Equipment;


/**
 * This class is automatically generated.
 * DO NOT EDIT THIS FILE DIRECTLY.
 */
@Generated
@io.vertigo.datafactory.search.metamodel.annotation.SearchIndexAnnotation(name = "IdxEquipment", dtIndex = "DtEquipmentIndex", keyConcept = "DtEquipment", loaderId = "EquipmentSearchLoader")
@io.vertigo.datafactory.search.metamodel.annotation.IndexCopyTo(field = "equipmentCategoryName", to = {"allText"})
@io.vertigo.datafactory.search.metamodel.annotation.IndexCopyTo(field = "name", to = {"allText"})
@io.vertigo.datafactory.search.metamodel.annotation.IndexCopyTo(field = "tags", to = {"allText"})
@io.vertigo.datafactory.search.metamodel.annotation.IndexCopyTo(field = "description", to = {"allText"})
@io.vertigo.datafactory.search.metamodel.annotation.IndexCopyTo(field = "code", to = {"allText"})
@io.vertigo.datafactory.search.metamodel.annotation.IndexCopyTo(field = "equipmentTypeName", to = {"allText"})
public final class EquipmentSearchClient implements Component {

	private final SearchManager searchManager;
	private final VTransactionManager transactionManager;

	/**
	 * Contructeur.
	 * @param searchManager Search Manager
	 * @param transactionManager Transaction Manager
	 */
	@Inject
	public EquipmentSearchClient(final SearchManager searchManager, final VTransactionManager transactionManager) {
		this.searchManager = searchManager;
		this.transactionManager = transactionManager;
	}

	/**
	 * Création d'une SearchQuery de type : Equipment.
	 * @param criteria Critères de recherche
	 * @param selectedFacetValues Liste des facettes sélectionnées à appliquer
	 * @return SearchQueryBuilder pour ce type de recherche
	 */
	@io.vertigo.datafactory.search.metamodel.annotation.FacetedQueryAnnotation(
		name = "QryEquipment",
		keyConcept = "DtEquipment",
		listFilterBuilderClass = io.vertigo.dynamox.search.DslListFilterBuilder.class,
		listFilterBuilderQuery = "allText:#+query*#",
		criteriaSmartType = "STyLabel",
		facets = {
			@io.vertigo.datafactory.search.metamodel.annotation.Facet(
				type = "term",
				name = "FctEquipmentEquipmentTypeName$qryEquipment",
				fieldName = "equipmentTypeName",
				label = "Equipment Type",
				order = io.vertigo.datafactory.collections.metamodel.FacetDefinition.FacetOrder.count),
			@io.vertigo.datafactory.search.metamodel.annotation.Facet(
				type = "range",
				name = "FctEquipmentPurchaseDate$qryEquipment",
				fieldName = "purchaseDate",
				label = "Purchase Date",
				ranges = {
					@io.vertigo.datafactory.search.metamodel.annotation.Range(code = "r1", filter = "purchaseDate:[01/01/2008 TO 01/01/2012]", label = "2008-2012"),
					@io.vertigo.datafactory.search.metamodel.annotation.Range(code = "r2", filter = "purchaseDate:[01/01/2012 TO 01/01/2016]", label = "2012-2016"),
					@io.vertigo.datafactory.search.metamodel.annotation.Range(code = "r3", filter = "purchaseDate:[01/01/2016 TO *]", label = "after 2016")},
				order = io.vertigo.datafactory.collections.metamodel.FacetDefinition.FacetOrder.definition),
			@io.vertigo.datafactory.search.metamodel.annotation.Facet(
				type = "term",
				name = "FctEquipmentEquipmentCategoryName$qryEquipment",
				fieldName = "equipmentCategoryName",
				label = "Equipment Category",
				order = io.vertigo.datafactory.collections.metamodel.FacetDefinition.FacetOrder.count)		})
	public SearchQueryBuilder createSearchQueryBuilderEquipment(final java.lang.String criteria, final SelectedFacetValues selectedFacetValues) {
		final FacetedQueryDefinition facetedQueryDefinition = Home.getApp().getDefinitionSpace().resolve("QryEquipment", FacetedQueryDefinition.class);
		final ListFilterBuilder<java.lang.String> listFilterBuilder = InjectorUtil.newInstance(facetedQueryDefinition.getListFilterBuilderClass());
		final ListFilter criteriaListFilter = listFilterBuilder.withBuildQuery(facetedQueryDefinition.getListFilterBuilderQuery()).withCriteria(criteria).build();
		return SearchQuery.builder(criteriaListFilter).withFacet(facetedQueryDefinition, selectedFacetValues);
	}

	/**
	 * Récupération du résultat issu d'une requête.
	 * @param searchQuery critères initiaux
	 * @param listState Etat de la liste (tri et pagination)
	 * @return Résultat correspondant à la requête (de type EquipmentIndex)
	 */
	public FacetedQueryResult<EquipmentIndex, SearchQuery> loadList(final SearchQuery searchQuery, final DtListState listState) {
		final SearchIndexDefinition indexDefinition = searchManager.findFirstIndexDefinitionByKeyConcept(Equipment.class);
		return searchManager.loadList(indexDefinition, searchQuery, listState);
	}

	/**
	 * Mark an entity as dirty. Index of these elements will be reindexed if Tx commited.
	 * Reindexation isn't synchrone, strategy is dependant of plugin's parameters.
	 *
	 * @param entityUID Key concept's UID
	 */
	public void markAsDirty(final UID<Equipment> entityUID) {
		transactionManager.getCurrentTransaction().addAfterCompletion((final boolean txCommitted) -> {
			if (txCommitted) {// reindex only is tx successful
				searchManager.markAsDirty(Arrays.asList(entityUID));
			}
		});
	}

	/**
	 * Mark an entity as dirty. Index of these elements will be reindexed if Tx commited.
	 * Reindexation isn't synchrone, strategy is dependant of plugin's parameters.
	 *
	 * @param entity Key concept
	 */
	public void markAsDirty(final Equipment entity) {
		markAsDirty(UID.of(entity));
	}
}
