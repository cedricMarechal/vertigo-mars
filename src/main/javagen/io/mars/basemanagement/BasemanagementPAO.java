package io.mars.basemanagement;

import javax.inject.Inject;

import io.vertigo.app.Home;
import io.vertigo.dynamo.task.TaskManager;
import io.vertigo.dynamo.task.metamodel.TaskDefinition;
import io.vertigo.dynamo.task.model.Task;
import io.vertigo.dynamo.task.model.TaskBuilder;
import io.vertigo.dynamo.store.StoreServices;
import io.vertigo.lang.Assertion;
import io.vertigo.lang.Generated;

/**
 * This class is automatically generated.
 * DO NOT EDIT THIS FILE DIRECTLY.
 */
 @Generated
public final class BasemanagementPAO implements StoreServices {
	private final TaskManager taskManager;

	/**
	 * Constructeur.
	 * @param taskManager Manager des Task
	 */
	@Inject
	public BasemanagementPAO(final TaskManager taskManager) {
		Assertion.checkNotNull(taskManager);
		//-----
		this.taskManager = taskManager;
	}

	/**
	 * Creates a taskBuilder.
	 * @param name  the name of the task
	 * @return the builder 
	 */
	private static TaskBuilder createTaskBuilder(final String name) {
		final TaskDefinition taskDefinition = Home.getApp().getDefinitionSpace().resolve(name, TaskDefinition.class);
		return Task.builder(taskDefinition);
	}

	/**
	 * Execute la tache TkGetBaseOverview.
	 * @param baseId Long 
	 * @return BaseOverview baseOverview
	*/
	public io.mars.basemanagement.domain.BaseOverview getBaseOverview(final Long baseId) {
		final Task task = createTaskBuilder("TkGetBaseOverview")
				.addValue("baseId", baseId)
				.build();
		return getTaskManager()
				.execute(task)
				.getResult();
	}

	/**
	 * Execute la tache TkGetBasesSummary.
	 * @return BasesSummary basesSummary
	*/
	public io.mars.basemanagement.domain.BasesSummary getBasesSummary() {
		final Task task = createTaskBuilder("TkGetBasesSummary")
				.build();
		return getTaskManager()
				.execute(task)
				.getResult();
	}

	/**
	 * Execute la tache TkGetEquipmentMaintenanceOverview.
	 * @param equipmentId Long 
	 * @return EquipmentMaintenanceOverview equipmentMaintenanceOverview
	*/
	public io.mars.basemanagement.domain.EquipmentMaintenanceOverview getEquipmentMaintenanceOverview(final Long equipmentId) {
		final Task task = createTaskBuilder("TkGetEquipmentMaintenanceOverview")
				.addValue("equipmentId", equipmentId)
				.build();
		return getTaskManager()
				.execute(task)
				.getResult();
	}

	/**
	 * Execute la tache TkGetEquipmentsOverview.
	 * @param baseId Long 
	 * @return DtList de EquipmentOverview overview
	*/
	public io.vertigo.dynamo.domain.model.DtList<io.mars.basemanagement.domain.EquipmentOverview> getEquipmentsOverview(final Long baseId) {
		final Task task = createTaskBuilder("TkGetEquipmentsOverview")
				.addValue("baseId", baseId)
				.build();
		return getTaskManager()
				.execute(task)
				.getResult();
	}

	/**
	 * Execute la tache TkLoadBaseIndex.
	 * @param baseIds List de Long 
	 * @return DtList de BaseIndex dtcIndex
	*/
	public io.vertigo.dynamo.domain.model.DtList<io.mars.basemanagement.search.BaseIndex> loadBaseIndex(final java.util.List<Long> baseIds) {
		final Task task = createTaskBuilder("TkLoadBaseIndex")
				.addValue("baseIds", baseIds)
				.build();
		return getTaskManager()
				.execute(task)
				.getResult();
	}

	/**
	 * Execute la tache TkLoadEquipmentIndex.
	 * @param equipmentIds List de Long 
	 * @return DtList de EquipmentIndex dtcIndex
	*/
	public io.vertigo.dynamo.domain.model.DtList<io.mars.basemanagement.search.EquipmentIndex> loadEquipmentIndex(final java.util.List<Long> equipmentIds) {
		final Task task = createTaskBuilder("TkLoadEquipmentIndex")
				.addValue("equipmentIds", equipmentIds)
				.build();
		return getTaskManager()
				.execute(task)
				.getResult();
	}

	/**
	 * Execute la tache TkSelectBaseId.
	 * @return List de Long baseIdList
	*/
	public java.util.List<Long> selectBaseId() {
		final Task task = createTaskBuilder("TkSelectBaseId")
				.build();
		return getTaskManager()
				.execute(task)
				.getResult();
	}

	/**
	 * Execute la tache TkSelectBusinessId.
	 * @return List de Long businessIdList
	*/
	public java.util.List<Long> selectBusinessId() {
		final Task task = createTaskBuilder("TkSelectBusinessId")
				.build();
		return getTaskManager()
				.execute(task)
				.getResult();
	}

	/**
	 * Execute la tache TkSelectGeosectorId.
	 * @return List de Long geosectorIdList
	*/
	public java.util.List<Long> selectGeosectorId() {
		final Task task = createTaskBuilder("TkSelectGeosectorId")
				.build();
		return getTaskManager()
				.execute(task)
				.getResult();
	}

	private TaskManager getTaskManager() {
		return taskManager;
	}
}
